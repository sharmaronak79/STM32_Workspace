
L4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001ac  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000358  08000360  00010360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000358  08000358  00010360  2**0
                  CONTENTS
  4 .ARM          00000000  08000358  08000358  00010360  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000358  08000360  00010360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000358  08000358  00010358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800035c  0800035c  0001035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00010360  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010360  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000014d  00000000  00000000  00010390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000cb  00000000  00000000  000104dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  000105a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000038  00000000  00000000  000105f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f3a  00000000  00000000  00010630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000045c  00000000  00000000  0001156a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003b40  00000000  00000000  000119c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00015506  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000084  00000000  00000000  00015558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000340 	.word	0x08000340

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000340 	.word	0x08000340

080001ec <delay>:
 */

#include <stdint.h>
#define AHB2ENR			0x4002104cU

void delay(int n){
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
		for(uint32_t i =0;i<n;i++);
 80001f4:	2300      	movs	r3, #0
 80001f6:	60fb      	str	r3, [r7, #12]
 80001f8:	e002      	b.n	8000200 <delay+0x14>
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	3301      	adds	r3, #1
 80001fe:	60fb      	str	r3, [r7, #12]
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	68fa      	ldr	r2, [r7, #12]
 8000204:	429a      	cmp	r2, r3
 8000206:	d3f8      	bcc.n	80001fa <delay+0xe>
	}
 8000208:	bf00      	nop
 800020a:	bf00      	nop
 800020c:	3714      	adds	r7, #20
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
	...

08000218 <main>:



int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
    /* Loop forever */
	uint32_t *pAHB2ENR = (uint32_t *)0x4002104C;
 800021e:	4b1b      	ldr	r3, [pc, #108]	; (800028c <main+0x74>)
 8000220:	617b      	str	r3, [r7, #20]
	//uint32_t *pGPIOB = (uint32_t *)0x48000400;
	uint32_t *pGPIOB_Mode = (uint32_t *)0x48000400;
 8000222:	4b1b      	ldr	r3, [pc, #108]	; (8000290 <main+0x78>)
 8000224:	613b      	str	r3, [r7, #16]
	uint32_t *pGPIOB_OTYPER = (uint32_t *)0x48000404;
 8000226:	4b1b      	ldr	r3, [pc, #108]	; (8000294 <main+0x7c>)
 8000228:	60fb      	str	r3, [r7, #12]
	uint32_t *pGPIOB_OSPEEDR = (uint32_t *)0x48000408;
 800022a:	4b1b      	ldr	r3, [pc, #108]	; (8000298 <main+0x80>)
 800022c:	60bb      	str	r3, [r7, #8]
	//uint32_t *pGPIOB_PUPDR = (uint32_t *)0x4800040C;
	//uint32_t *pGPIOB_IDR = (uint32_t *)0x48000410;
	uint32_t *pGPIOB_ODR = (uint32_t *)0x48000414;
 800022e:	4b1b      	ldr	r3, [pc, #108]	; (800029c <main+0x84>)
 8000230:	607b      	str	r3, [r7, #4]
	//uint32_t *pGPIOB_BSRR = (uint32_t *)0x48000418;


	*pAHB2ENR |= (1<<1);
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f043 0202 	orr.w	r2, r3, #2
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	601a      	str	r2, [r3, #0]
	*pGPIOB_Mode &= ~(1<<15); //output mode pin 7
 800023e:	693b      	ldr	r3, [r7, #16]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000246:	693b      	ldr	r3, [r7, #16]
 8000248:	601a      	str	r2, [r3, #0]
	*pGPIOB_Mode &= ~(1<<29); //output mode pin 14
 800024a:	693b      	ldr	r3, [r7, #16]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	601a      	str	r2, [r3, #0]
	//*pGPIOB_Mode = 0xdfff7fff;
	//*pGPIOB_OTYPER = 0x4080; // Pin7 and 14 as open drain
	*pGPIOB_OSPEEDR |= (1<<14); //pin7 medium speed
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	601a      	str	r2, [r3, #0]
	*pGPIOB_OSPEEDR |= (1<<28); //pin 14 medium speed
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	601a      	str	r2, [r3, #0]

	while(1){
	//*pGPIOB_BSRR |= (1<<7); // set pin7
	//*pGPIOB_BSRR |= (1<<14); //set pin14

	*pGPIOB_ODR = 0xffff;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000274:	601a      	str	r2, [r3, #0]
	delay(500000);
 8000276:	480a      	ldr	r0, [pc, #40]	; (80002a0 <main+0x88>)
 8000278:	f7ff ffb8 	bl	80001ec <delay>

	//*pGPIOB_BSRR |= (1<<23); // Reset pin7
	//*pGPIOB_BSRR |= (1<<30); //Reset pin14
	*pGPIOB_ODR = 0x0;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
	delay(500000);
 8000282:	4807      	ldr	r0, [pc, #28]	; (80002a0 <main+0x88>)
 8000284:	f7ff ffb2 	bl	80001ec <delay>
	*pGPIOB_ODR = 0xffff;
 8000288:	e7f1      	b.n	800026e <main+0x56>
 800028a:	bf00      	nop
 800028c:	4002104c 	.word	0x4002104c
 8000290:	48000400 	.word	0x48000400
 8000294:	48000404 	.word	0x48000404
 8000298:	48000408 	.word	0x48000408
 800029c:	48000414 	.word	0x48000414
 80002a0:	0007a120 	.word	0x0007a120

080002a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a4:	480d      	ldr	r0, [pc, #52]	; (80002dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ac:	480c      	ldr	r0, [pc, #48]	; (80002e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ae:	490d      	ldr	r1, [pc, #52]	; (80002e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b0:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <LoopForever+0xe>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b4:	e002      	b.n	80002bc <LoopCopyDataInit>

080002b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ba:	3304      	adds	r3, #4

080002bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c0:	d3f9      	bcc.n	80002b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c2:	4a0a      	ldr	r2, [pc, #40]	; (80002ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c4:	4c0a      	ldr	r4, [pc, #40]	; (80002f0 <LoopForever+0x16>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c8:	e001      	b.n	80002ce <LoopFillZerobss>

080002ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002cc:	3204      	adds	r2, #4

080002ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d0:	d3fb      	bcc.n	80002ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d2:	f000 f811 	bl	80002f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d6:	f7ff ff9f 	bl	8000218 <main>

080002da <LoopForever>:

LoopForever:
    b LoopForever
 80002da:	e7fe      	b.n	80002da <LoopForever>
  ldr   r0, =_estack
 80002dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80002e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e8:	08000360 	.word	0x08000360
  ldr r2, =_sbss
 80002ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f0:	2000001c 	.word	0x2000001c

080002f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f4:	e7fe      	b.n	80002f4 <ADC1_2_IRQHandler>
	...

080002f8 <__libc_init_array>:
 80002f8:	b570      	push	{r4, r5, r6, lr}
 80002fa:	4d0d      	ldr	r5, [pc, #52]	; (8000330 <__libc_init_array+0x38>)
 80002fc:	4c0d      	ldr	r4, [pc, #52]	; (8000334 <__libc_init_array+0x3c>)
 80002fe:	1b64      	subs	r4, r4, r5
 8000300:	10a4      	asrs	r4, r4, #2
 8000302:	2600      	movs	r6, #0
 8000304:	42a6      	cmp	r6, r4
 8000306:	d109      	bne.n	800031c <__libc_init_array+0x24>
 8000308:	4d0b      	ldr	r5, [pc, #44]	; (8000338 <__libc_init_array+0x40>)
 800030a:	4c0c      	ldr	r4, [pc, #48]	; (800033c <__libc_init_array+0x44>)
 800030c:	f000 f818 	bl	8000340 <_init>
 8000310:	1b64      	subs	r4, r4, r5
 8000312:	10a4      	asrs	r4, r4, #2
 8000314:	2600      	movs	r6, #0
 8000316:	42a6      	cmp	r6, r4
 8000318:	d105      	bne.n	8000326 <__libc_init_array+0x2e>
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000320:	4798      	blx	r3
 8000322:	3601      	adds	r6, #1
 8000324:	e7ee      	b.n	8000304 <__libc_init_array+0xc>
 8000326:	f855 3b04 	ldr.w	r3, [r5], #4
 800032a:	4798      	blx	r3
 800032c:	3601      	adds	r6, #1
 800032e:	e7f2      	b.n	8000316 <__libc_init_array+0x1e>
 8000330:	08000358 	.word	0x08000358
 8000334:	08000358 	.word	0x08000358
 8000338:	08000358 	.word	0x08000358
 800033c:	0800035c 	.word	0x0800035c

08000340 <_init>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	bf00      	nop
 8000344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000346:	bc08      	pop	{r3}
 8000348:	469e      	mov	lr, r3
 800034a:	4770      	bx	lr

0800034c <_fini>:
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034e:	bf00      	nop
 8000350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000352:	bc08      	pop	{r3}
 8000354:	469e      	mov	lr, r3
 8000356:	4770      	bx	lr
